#!/bin/bash

# Global Parameters
connect_timeout=5
current_user=$(whoami)

# Input Parameters
origin_file=$1
target_file=$2

export LC_ALL=C

print_host() {
	echo -e "\033[0;3;35m -> \033[0;3;35m$host \033[0m"
}

auto_passwd_trans() {
  set timeout -1
  expect -c "
    spawn $cmd
      expect {
        \"*yes/no*\" {send \"yes\r\"; exp_continue}
        \"*password:*\" {send \"$pass\r\"; exp_continue}
      }
      expect 100%
      expect eof
      interact
  "
}

auto_passwd_cmd() {
  set timeout -1
  expect -c "
    spawn $cmd
      expect {
        \"*yes/no*\" {send \"yes\r\"; exp_continue}
        \"*password:*\" {send \"$pass\r\"; exp_continue}
        \"*# \" {send_user \"Job Finished.\r\"; expect eof}
      }
  "
}

trans_file() {
  method="trans_file"
  print_host $host ${method}
  cmd="scp"
  if [ ! -z $port ]; then
  	cmd="${cmd} -P ${port}"
  fi
  cmd="${cmd} -o ConnectTimeout=${connect_timeout} $(realpath $origin_file) ${user}@${host}:${target_file}"
  auto_passwd_trans $cmd $pass
}

trans_folder() {
  method="trans_folder"
  print_host $host ${method}
  cmd="scp"
  if [ ! -z $port ]; then
  	cmd="${cmd} -P ${port}"
  fi
  cmd="${cmd} -r -o ConnectTimeout=${connect_timeout} $(realpath $origin_file) ${user}@${host}:${target_file}"
  auto_passwd_trans $cmd $pass
}

execute_cmd() {
  method="execute_cmd"
  print_host $host ${method}
  cmd="ssh"
  if [ ! -z $port ]; then
  	cmd="${cmd} -p ${port}"
  fi
  cmd="${cmd} -o ConnectTimeout=${connect_timeout} ${user}@${host} \"${origin_file}\""
  auto_passwd_cmd $cmd $pass 
}

cluster_cmd() {
  for host_union in $(<hosts.conf); do
    # Check if it is a comments line.
    [ ${host_union:0:1} = "#" ] && continue
    # Split hosts.conf 
  	IFS=':' read -a host_array <<< "${host_union}"
  	user=${host_array[0]}
	  host=${host_array[1]}
	  port=${host_array[2]}
    pass=${host_array[3]}
    $1 $user $host $port $pass
  done
}

# Check if 'hosts.conf' config file exist
if [ ! -f hosts.conf ]; then
  echo "sscp: sscp's config file 'hosts.conf' not exist in current path!"
  exit
fi

# Execute 'sscp' command by the number of arguments
if [ "$#" = 1 ]; then
	cluster_cmd execute_cmd
elif [ "$#" = 2 ]; then
	if [ -d ${origin_file} ]; then
      #trans_folder
      cluster_cmd trans_folder
    elif [ -f ${origin_file} ]; then
      #trans_file
      cluster_cmd trans_file
    else
      echo "sscp: error '$origin_file', file or folder is not exist."
      exit
    fi
else
	echo "sscp: try 'sscp --help' or 'sscp --manual' for more information"
	exit
fi

